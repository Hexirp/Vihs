
==================== FINAL INTERFACE ====================
2017-06-02 12:34:32.983899 UTC

interface Vihs-0.1.0.0-DMVo40OgO5qKdq1xmuMUG2:Insert 8002
  interface hash: a4ba58d9c7b359a8160334c1efe9d762
  ABI hash: 90741bebc3a9493eb85a020372701339
  export-list hash: 9e35f5b0c92729eb8be6d87b88fe3b70
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Insert.insert
  Insert.insertBuff
  Insert.main
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
960b7ce7eb3d048bb80f4c0481af5a34
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Insert.$trModule2
                   Insert.$trModule1) -}
4d6f088771ec45319241824dd6b94b65
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Insert"#) -}
a1f97a5548a117458b78b13578286a66
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Vihs-0.1.0.0-DMVo40OgO5qKdq1xmuMUG2"#) -}
34bd3c907ba972ff59af80f15ca6afd8
  $winsert ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (ww :: GHC.Prim.Int#) ->
                 let {
                   n :: [GHC.Types.Char]
                   = GHC.Base.++
                       @ GHC.Types.Char
                       w1
                       (case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                        let {
                          y :: GHC.Prim.Int# = GHC.Prim.-# ww2 ww
                        } in
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<# 0# y) of wild {
                          GHC.Types.False -> Insert.insert1
                          GHC.Types.True
                          -> GHC.List.reverse1
                               @ GHC.Types.Char
                               (GHC.List.$wunsafeTake
                                  @ GHC.Types.Char
                                  y
                                  (GHC.List.reverse1
                                     @ GHC.Types.Char
                                     w
                                     (GHC.Types.[] @ GHC.Types.Char)))
                               (GHC.Types.[] @ GHC.Types.Char) } })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0# ww) of wild {
                   GHC.Types.False -> n
                   GHC.Types.True
                   -> letrec {
                        $wgo :: [GHC.Types.Char] -> GHC.Prim.Int# -> [GHC.Types.Char]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                        = \ (w2 :: [GHC.Types.Char]) (ww1 :: GHC.Prim.Int#) ->
                          case w2 of wild1 {
                            [] -> n
                            : y ys
                            -> case ww1 of ds1 {
                                 DEFAULT
                                 -> GHC.Types.: @ GHC.Types.Char y ($wgo ys (GHC.Prim.-# ds1 1#))
                                 1# -> GHC.Types.: @ GHC.Types.Char y n } }
                      } in
                      $wgo w ww }) -}
de4dc69a19e36cde75fef824fab1d84b
  $winsertBuff ::
    [GHC.Base.String]
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> [[GHC.Types.Char]]
  {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Base.String])
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Types.Int)
                   (ww :: GHC.Prim.Int#) ->
                 let {
                   n :: GHC.Base.String
                   = case w2 of ww1 { GHC.Types.I# ww2 ->
                     Insert.$winsert (GHC.List.$w!! @ GHC.Base.String w ww) w1 ww2 }
                 } in
                 let {
                   n1 :: [[GHC.Types.Char]]
                   = case GHC.List.$wlenAcc
                            @ [GHC.Types.Char]
                            w
                            0# of ww2 { DEFAULT ->
                     let {
                       y :: GHC.Prim.Int# = GHC.Prim.-# (GHC.Prim.-# ww2 ww) 1#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<# 0# y) of wild {
                       GHC.Types.False -> Insert.insertBuff1
                       GHC.Types.True
                       -> GHC.List.reverse1
                            @ GHC.Base.String
                            (GHC.List.$wunsafeTake
                               @ [GHC.Types.Char]
                               y
                               (GHC.List.reverse1
                                  @ GHC.Base.String
                                  w
                                  (GHC.Types.[] @ GHC.Base.String)))
                            (GHC.Types.[] @ GHC.Base.String) } }
                 } in
                 let {
                   n2 :: [[GHC.Types.Char]] = GHC.Types.: @ [GHC.Types.Char] n n1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0# ww) of wild {
                   GHC.Types.False -> n2
                   GHC.Types.True
                   -> letrec {
                        $wgo :: [[GHC.Types.Char]] -> GHC.Prim.Int# -> [[GHC.Types.Char]]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                        = \ (w3 :: [[GHC.Types.Char]]) (ww1 :: GHC.Prim.Int#) ->
                          case w3 of wild1 {
                            [] -> n2
                            : y ys
                            -> case ww1 of ds1 {
                                 DEFAULT
                                 -> GHC.Types.: @ [GHC.Types.Char] y ($wgo ys (GHC.Prim.-# ds1 1#))
                                 1# -> GHC.Types.: @ [GHC.Types.Char] y n2 } }
                      } in
                      $wgo w ww }) -}
91fb2ef0404e9e91e2cba9a03cbae2aa
  insert ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,1*U><S(S),1*U(U)><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 -> Insert.$winsert w w1 ww1 }) -}
d6ba70554dd9d0350de5320f2f272ff6
  insert1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.List.reverse1
                   @ GHC.Types.Char
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ GHC.Types.Char)) -}
822d88a2521688ac2f353f00ef7579ff
  insertBuff ::
    [GHC.Base.String]
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> [GHC.Base.String]
  {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U(U)><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [GHC.Base.String])
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int) ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 Insert.$winsertBuff w w1 w2 ww1 }) -}
b71b94ffa30b10b20bf0cb79804f6ffb
  insertBuff1 :: [GHC.Base.String]
  {- Unfolding: (GHC.List.reverse1
                   @ GHC.Base.String
                   (GHC.Types.[] @ [GHC.Types.Char])
                   (GHC.Types.[] @ GHC.Base.String)) -}
f5d2f1f4f285e8e39c27bd1769469c59
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Insert.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
5df4ea1c7cd4a9745b07fba668ca6d31
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Insert.main11
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Insert.main2
                   GHC.Types.True
                   ipv }) -}
6bdcb4ff9208854e1ecec08f232e627d
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AAA"#) -}
5b5c2f46196413eab8a01e77cb969f29
  main11 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showList__
                   @ [GHC.Types.Char]
                   GHC.Show.shows_$cshowList1
                   Insert.main12
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8bbde0f9dd462d5b40d6840b7a009a0b
  main12 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.List.$wunsafeTake
                   @ [GHC.Types.Char]
                   1#
                   Insert.main_str) -}
d8efe69ca568aa38ac3bdd57a48e6e63
  main2 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showList__
                   @ [GHC.Types.Char]
                   GHC.Show.shows_$cshowList1
                   Insert.main3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
09702b1173cb2b43fc251cbc91746336
  main3 :: [[GHC.Types.Char]]
  {- Unfolding: (Insert.$winsertBuff
                   Insert.main_str
                   Insert.main5
                   Insert.main4
                   2#) -}
402188717fedf1102e94f8b7deb9704f
  main4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
06f51a414efa57ce9ab921bfa5fd544e
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "b"#) -}
b86e12af708818913bc600ba2f0e64dd
  main6 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Insert.main9
                   Insert.main7) -}
8ad5084861dcad7bbf9b265114450cca
  main7 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Insert.main8
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
1bb93e510f5c3fa947c067eb3ae8f541
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CCC"#) -}
4f2b2bcd9274598b309f5fd2cd6d1c19
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BBB"#) -}
905ae8490288afad73cff74f9970f0de
  main_str :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Insert.main10
                   Insert.main6) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

