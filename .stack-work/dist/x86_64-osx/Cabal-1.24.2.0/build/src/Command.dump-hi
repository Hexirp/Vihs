
==================== FINAL INTERFACE ====================
2017-06-02 12:34:33.188321 UTC

interface Vihs-0.1.0.0-DMVo40OgO5qKdq1xmuMUG2:Command 8002
  interface hash: 91ddf6b0ee60f0d1efc04b2f6dbfee70
  ABI hash: b7a741c6a3958870861b830188b3a7f4
  export-list hash: 8eca413db8e0ab490d908a66c75a766a
  orphan hash: dd4cda6dedc03f3e34d033e89077572d
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Command.parseInt
  Command.parseIntList
  Command.parseText
  Command.setCmd
  Command.Command{Command.Command addr1 addr2 cmdName param}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec b63ffbcfd32da83683c00215f9c65dae
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Char d53119cfb6cc359f4e0f9ede64e0f78f
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Combinator 66f1086aa7a42f6659ea2da2b481ca67
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Prim 09b8e7124f6cf9e8a58a20d480bbf894
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.String 51cfdd88fd21b0eb9bc7dcb50c6d3f2c
8339134d128479a69c91f024f6994aac
  $fShowCommand :: GHC.Show.Show Command.Command
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Command.Command
                  Command.$fShowCommand_$cshowsPrec
                  Command.$fShowCommand_$cshow
                  Command.$fShowCommand_$cshowList -}
8339134d128479a69c91f024f6994aac
  $fShowCommand1 :: Command.Command -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Command.Command) ->
                 case w of ww { Command.Command ww1 ww2 ww3 ww4 ->
                 Command.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 }) -}
a12c497946615f4e82c6c070bd0e50fb
  $fShowCommand2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
ce14838a1418f263a3930ca4e5fd37f2
  $fShowCommand3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "param = "#) -}
6c8c4e562b2759bea00bc647b88c0b8d
  $fShowCommand4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "cmdName = "#) -}
b4ba1f7ff9135ef964f522a389cb7381
  $fShowCommand5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "addr2 = "#) -}
181e4f71068a59e7384ad3d465ed2c0d
  $fShowCommand6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
59347f46b575956f695c346aa21b0102
  $fShowCommand7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "addr1 = "#) -}
c43922ec6b5368e1d4facb39bda492d8
  $fShowCommand8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Command {"#) -}
c0e1349b8b2cdad4b805656f42700661
  $fShowCommand9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8339134d128479a69c91f024f6994aac
  $fShowCommand_$cshow :: Command.Command -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Command.Command) ->
                 Command.$fShowCommand_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8339134d128479a69c91f024f6994aac
  $fShowCommand_$cshowList :: [Command.Command] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Command.Command
                   Command.$fShowCommand1) -}
8339134d128479a69c91f024f6994aac
  $fShowCommand_$cshowsPrec ::
    GHC.Types.Int -> Command.Command -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Command.Command) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Command.Command ww3 ww4 ww5 ww6 ->
                 Command.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 } }) -}
e4d0305dc9bb18fe5e359e84a4c26b74
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  (Command.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok)
                  (Command.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok) -}
b2d291b49d30398fcc24d2f75ba31a44
  $s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream ::
    GHC.Base.Monad Data.Functor.Identity.Identity
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ tok -> Data.Functor.Identity.$fMonadIdentity) -}
2512001c39ebe8ee1a6c1ab4c41a1bc5
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Nothing @ (tok, [tok]))
                   : t ts
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Just @ (tok, [tok]) (t, ts)) }) -}
17122838346fb997f0147e4c5617fc13
  $tc'Command :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5547395959267635806##
                   9519714047306698817##
                   Command.$trModule
                   Command.$tc'Command1) -}
b8d8fc6dfaccc3cc6bc686d0e42bef21
  $tc'Command1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Command"#) -}
df289c2d672b2c21f2ab08c0061200bd
  $tcCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16294507607244583668##
                   6019817615459314737##
                   Command.$trModule
                   Command.$trModule1) -}
00b6552e5bcd477a945fd63b2afbb242
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Command.$trModule2
                   Command.$trModule1) -}
d6d63c9f57fcc06565fbd49fd7f31ec1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Command"#) -}
19d3fcf0a7393c35bfe96fd2619c45b7
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Vihs-0.1.0.0-DMVo40OgO5qKdq1xmuMUG2"#) -}
8158356c424b999b14c72c9ced228242
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Char
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,U(U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: GHC.Types.Char)
                   (ww4 :: GHC.Base.Maybe GHC.Base.String) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       Command.$fShowCommand9
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       Command.$fShowCommand9
                       ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ [GHC.Types.Char]
                       GHC.Show.$fShow[]_$s$fShow[]1
                       Command.$fShowCommand9
                       ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Command.$fShowCommand8
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Command.$fShowCommand7
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Command.$fShowCommand6
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Command.$fShowCommand5
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Command.$fShowCommand6
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Command.$fShowCommand4
                                            (case ww3 of ww5 { GHC.Types.C# ww6 ->
                                             let {
                                               w :: GHC.Base.String
                                               = GHC.Base.++
                                                   @ GHC.Types.Char
                                                   Command.$fShowCommand6
                                                   (GHC.Base.++
                                                      @ GHC.Types.Char
                                                      Command.$fShowCommand3
                                                      (f2
                                                         (GHC.Base.++
                                                            @ GHC.Types.Char
                                                            Command.$fShowCommand2
                                                            x)))
                                             } in
                                             case ww6 of ds {
                                               DEFAULT
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.shows14
                                                    (GHC.Show.$wshowLitChar
                                                       ds
                                                       (GHC.Types.:
                                                          @ GHC.Types.Char
                                                          GHC.Show.shows14
                                                          w))
                                               '\''#
                                               -> GHC.Base.++
                                                    @ GHC.Types.Char
                                                    GHC.Show.shows13
                                                    w } }))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
7bbebe81bc78c7d0cfadfef43861a70f
  $wsetCmd ::
    GHC.Base.String
    -> (# GHC.Base.Maybe GHC.Types.Int, GHC.Base.Maybe GHC.Types.Int,
          GHC.Types.Char, GHC.Base.Maybe GHC.Base.String #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 let {
                   addrs :: [GHC.Types.Int]
                   = case (Text.Parsec.Prim.runPT
                             @ GHC.Base.String
                             @ Data.Functor.Identity.Identity
                             @ GHC.Types.Char
                             @ ()
                             @ [GHC.Types.Int]
                             (Command.$s$fStream[]mtok @ GHC.Types.Char)
                             Command.parseIntList1
                               `cast`
                             (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                       <GHC.Base.String>_R
                                       <()>_R
                                       <Data.Functor.Identity.Identity>_R
                                       <[GHC.Types.Int]>_R))
                             GHC.Tuple.()
                             (GHC.Types.[] @ GHC.Types.Char)
                             (case GHC.List.$w!!
                                     @ GHC.Base.String
                                     (Data.OldList.words w)
                                     0# of wild {
                                [] -> GHC.List.init2 @ GHC.Types.Char
                                : x xs -> GHC.List.init1 @ GHC.Types.Char x xs }))
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <Data.Either.Either
                                  Text.Parsec.Error.ParseError [GHC.Types.Int]>_R) of wild {
                       Data.Either.Left err -> GHC.Types.[] @ GHC.Types.Int
                       Data.Either.Right x -> x }
                 } in
                 (# case GHC.Classes.$fEq[]_$s$c==
                           addrs
                           (GHC.Types.[] @ GHC.Types.Int) of wild {
                      GHC.Types.False
                      -> GHC.Base.Just
                           @ GHC.Types.Int
                           (GHC.List.$w!! @ GHC.Types.Int addrs 0#)
                      GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Int },
                    case GHC.List.$wlenAcc @ GHC.Types.Int addrs 0# of ww2 { DEFAULT ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# ww2 2#) of wild {
                      GHC.Types.False
                      -> GHC.Base.Just
                           @ GHC.Types.Int
                           (GHC.List.$w!! @ GHC.Types.Int addrs 1#)
                      GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Int } },
                    Command.setCmd_go
                      (GHC.List.$w!! @ GHC.Base.String (Data.OldList.words w) 0#)
                      (GHC.List.lastError @ GHC.Types.Char),
                    case Data.OldList.wordsFB
                           @ (GHC.Types.Int -> GHC.Types.Int)
                           (GHC.List.lengthFB @ [GHC.Types.Char])
                           (GHC.Base.id @ GHC.Types.Int)
                           w
                           Command.$fShowCommand9 of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# x 2#) of wild1 {
                      GHC.Types.False
                      -> GHC.Base.Just
                           @ GHC.Base.String
                           (GHC.List.$w!! @ GHC.Base.String (Data.OldList.words w) 1#)
                      GHC.Types.True -> GHC.Base.Nothing @ GHC.Base.String } } #)) -}
8339134d128479a69c91f024f6994aac
  data Command
    = Command {addr1 :: GHC.Base.Maybe GHC.Types.Int,
               addr2 :: GHC.Base.Maybe GHC.Types.Int,
               cmdName :: GHC.Types.Char,
               param :: GHC.Base.Maybe GHC.Base.String}
947aa33c7c348436b2505cfccd37b9aa
  addr1 :: Command.Command -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Command.Command
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Command.Command) ->
                 case ds of wild { Command.Command ds1 ds2 ds3 ds4 -> ds1 }) -}
ee55a798ca2aff3154afea14b601945c
  addr2 :: Command.Command -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Command.Command
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Command.Command) ->
                 case ds of wild { Command.Command ds1 ds2 ds3 ds4 -> ds2 }) -}
b46dac0ab43349b4b06c673159f9d6a5
  cmdName :: Command.Command -> GHC.Types.Char
  RecSel Left Command.Command
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Command.Command) ->
                 case ds of wild { Command.Command ds1 ds2 ds3 ds4 -> ds3 }) -}
c32dbd1a44df43fd0f897f0bee172c35
  param :: Command.Command -> GHC.Base.Maybe GHC.Base.String
  RecSel Left Command.Command
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Command.Command) ->
                 case ds of wild { Command.Command ds1 ds2 ds3 ds4 -> ds4 }) -}
30b54787fe060be39ee8fcd9156dc976
  parseInt :: Text.Parsec.String.Parser GHC.Types.Int
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Command.parseInt1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Types.Int>_R)) -}
385c63bd27783d3b0a4b929cbeea0670
  parseInt1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Types.Int
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Types.Int
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: GHC.Types.Int
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: GHC.Types.Int
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ GHC.Types.Char
                   Command.parseInt5
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b1
                   s1
                   (\ (x :: [GHC.Types.Char])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    cok
                      (case Text.Read.readEither6
                              @ GHC.Types.Int
                              (Text.ParserCombinators.ReadP.run
                                 @ GHC.Types.Int
                                 Command.parseInt4
                                 x) of wild {
                         [] -> Command.parseInt3
                         : x1 ds
                         -> case ds of wild1 { [] -> x1 : ipv ipv1 -> Command.parseInt2 } })
                      s2
                      (case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   cerr
                   (\ (x :: [GHC.Types.Char])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    eok
                      (case Text.Read.readEither6
                              @ GHC.Types.Int
                              (Text.ParserCombinators.ReadP.run
                                 @ GHC.Types.Int
                                 Command.parseInt4
                                 x) of wild {
                         [] -> Command.parseInt3
                         : x1 ds
                         -> case ds of wild1 { [] -> x1 : ipv ipv1 -> Command.parseInt2 } })
                      s2
                      (case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eerr) -}
3badf42c6a0d9a468a7f07cfa8e97489
  parseInt2 :: GHC.Types.Int
  {- Strictness: x -}
b790297d08e073821c15bf0457ff51a5
  parseInt3 :: GHC.Types.Int
  {- Strictness: x -}
efb36e275bbb702bfa6c1fa084bdb519
  parseInt4 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
7de99c9a9c0ca109ce9304ad6fa53d11
  parseInt5 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (eta :: Text.Parsec.Prim.State GHC.Base.String ())
                   (eta1 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Command.parseInt7
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Command.parseInt6
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
7f2223e798a92910e044131e9c275183
  parseInt6 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.digit2
                   (GHC.Types.[] @ GHC.Base.String)) -}
f91e34af83c0f1b029890ce1c7205a8b
  parseInt7 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   (w2 :: Text.Parsec.Prim.State GHC.Base.String ())[OneShot]
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w5 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot]
                   (w6 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)[OneShot] ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wsatisfy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Command.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isDigit
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
d9aa1d492b05ad0f2fac2f1c58b89a8f
  parseIntList :: GHC.Base.String -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (input :: GHC.Base.String) ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ [GHC.Types.Int]
                         (Command.$s$fStream[]mtok @ GHC.Types.Char)
                         Command.parseIntList1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <GHC.Base.String>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <[GHC.Types.Int]>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         input)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError [GHC.Types.Int]>_R) of wild {
                   Data.Either.Left err -> GHC.Types.[] @ GHC.Types.Int
                   Data.Either.Right x -> x }) -}
8b38e4654313500137a327b2a9a39351
  parseIntList1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([GHC.Types.Int]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Int]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w3 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w4 :: [GHC.Types.Int]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w6 :: [GHC.Types.Int]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w7 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wsepBy1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ GHC.Types.Int
                   @ GHC.Types.Char
                   Command.parseInt1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Int>_R))
                   Command.parseIntList2
                   @ b
                   w3
                   w4
                   w5
                   w6
                   w7) -}
2d6002d51bebe22e4f8b34bdb3216f87
  parseIntList2 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Command.$s$fStream[]mtok @ GHC.Types.Char)
                   Command.parseIntList3) -}
0ff9034b39b3255a780fe62bc3902a75
  parseIntList3 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# ','#) -}
1da1185e5cdcaaec4d723cfe9882f10b
  parseText :: Text.Parsec.String.Parser [GHC.Types.Int]
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Command.parseIntList1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <[GHC.Types.Int]>_R)) -}
cbdefc3b9a4b4f9a29b2f1d4b2f45c39
  setCmd :: GHC.Base.String -> Command.Command
  {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Command.$wsetCmd w of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 Command.Command ww1 ww2 ww3 ww4 }) -}
432bda7deba40a1bb745c881893700c1
  setCmd_go :: [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)> -}
instance [safe] GHC.Show.Show [Command.Command]
  = Command.$fShowCommand
"SPEC/Command $fStream[]mtok @ Identity _" [ALWAYS] forall @ tok
                                                           ($dMonad :: GHC.Base.Monad
                                                                         Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  $dMonad
  = Command.$s$fStream[]mtok @ tok
"SPEC/Command $fStream[]mtok_$cp1Stream @ Identity _" [ALWAYS] forall @ tok
                                                                      ($dMonad :: GHC.Base.Monad
                                                                                    Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cp1Stream @ Data.Functor.Identity.Identity
                                             @ tok
                                             $dMonad
  = Command.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok
"SPEC/Command $fStream[]mtok_$cuncons @ Identity _" [ALWAYS] forall @ tok
                                                                    ($dMonad :: GHC.Base.Monad
                                                                                  Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = Command.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

