
==================== FINAL INTERFACE ====================
2017-06-02 12:34:33.661787 UTC

interface Vihs-0.1.0.0-DMVo40OgO5qKdq1xmuMUG2:Ed 8002
  interface hash: d56107c334bce75bffaabe1ac36161ab
  ABI hash: 55d7d9542c6e92305f3c82e7b838ae6b
  export-list hash: 93cb88264b74415d013d8910ad24553e
  orphan hash: 14c379b5c439759e4c5c460eac7ae3f8
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Ed.buffToFile
  Ed.deleteLine
  Ed.ed
  Ed.iCmd
  Ed.insert
module dependencies: Command
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      haskeline-0.7.4.0@haskeline-0.7.4.0-DeCMMzb9PSJC3zwcMXMk7s
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      terminfo-0.4.1.0@terminfo-0.4.1.0-FNScbjwxa2Y3p4e5RvG3l
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  Command b7a741c6a3958870861b830188b3a7f4
  exports: 8eca413db8e0ab490d908a66c75a766a
  Command 8339134d128479a69c91f024f6994aac
  addr1 947aa33c7c348436b2505cfccd37b9aa
  addr2 ee55a798ca2aff3154afea14b601945c
  cmdName b46dac0ab43349b4b06c673159f9d6a5
  param c32dbd1a44df43fd0f897f0bee172c35
  setCmd cbdefc3b9a4b4f9a29b2f1d4b2f45c39
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  haskeline-0.7.4.0@haskeline-0.7.4.0-DeCMMzb9PSJC3zwcMXMk7s:System.Console.Haskeline 50dffb36d98ede177ddf662dadb994c8
import  -/  haskeline-0.7.4.0@haskeline-0.7.4.0-DeCMMzb9PSJC3zwcMXMk7s:System.Console.Haskeline.InputT 1b0fe60bef861a93d099f0219322a648
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec b63ffbcfd32da83683c00215f9c65dae
06a36bf59f115e58bbe626f328105216
  $sdefaultSettings ::
    System.Console.Haskeline.InputT.Settings GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, False)
                (System.Console.Haskeline.InputT.Settings
                   @ GHC.Types.IO
                   (System.Console.Haskeline.Completion.completeFilename
                      @ GHC.Types.IO
                      Control.Monad.IO.Class.$fMonadIOIO)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   GHC.Types.True) -}
a0f423bedda1d6f9895561c95fecacd9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Ed.$trModule2 Ed.$trModule1) -}
c0706e12cc785338f0b26dba2672815d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Ed"#) -}
12e41d74156bf823ccd2b07dd99652e5
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Vihs-0.1.0.0-DMVo40OgO5qKdq1xmuMUG2"#) -}
6826e938b60bc8f2972d16e0fd8d3b2c
  $wdeleteLine ::
    [GHC.Base.String]
    -> GHC.Prim.Int# -> GHC.Types.Int -> [GHC.Base.String]
  {- Arity: 3, Strictness: <S,U><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Base.String])
                   (ww :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 case GHC.List.$wlenAcc @ [GHC.Types.Char] w 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww ww2) of wild {
                   GHC.Types.False -> Ed.deleteLine2
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 0#) of wild1 {
                        GHC.Types.False -> Ed.deleteLine2
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# (GHC.Prim.-# ww 1#) ww2) of wild2 {
                             GHC.Types.False -> Ed.deleteLine2
                             GHC.Types.True
                             -> let {
                                  n :: GHC.Prim.Int# = GHC.Prim.-# ww 1#
                                } in
                                let {
                                  n1 :: [[GHC.Types.Char]]
                                  = case w1 of wild3 { GHC.Types.I# y ->
                                    let {
                                      n2 :: GHC.Prim.Int#
                                      = GHC.Prim.+# (GHC.Prim.-# (GHC.Prim.-# ww2 ww) y) 1#
                                    } in
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.<# 0# n2) of wild4 {
                                      GHC.Types.False -> Ed.deleteLine1
                                      GHC.Types.True
                                      -> GHC.List.reverse1
                                           @ GHC.Base.String
                                           (GHC.List.$wunsafeTake
                                              @ [GHC.Types.Char]
                                              n2
                                              (GHC.List.reverse1
                                                 @ GHC.Base.String
                                                 w
                                                 (GHC.Types.[] @ GHC.Base.String)))
                                           (GHC.Types.[] @ GHC.Base.String) } }
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# 0# n) of wild3 {
                                  GHC.Types.False -> n1
                                  GHC.Types.True
                                  -> letrec {
                                       $wgo3 :: [[GHC.Types.Char]]
                                                -> GHC.Prim.Int# -> [[GHC.Types.Char]]
                                         {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                                       = \ (w2 :: [[GHC.Types.Char]]) (ww1 :: GHC.Prim.Int#) ->
                                         case w2 of wild4 {
                                           [] -> n1
                                           : y ys
                                           -> case ww1 of ds2 {
                                                DEFAULT
                                                -> GHC.Types.:
                                                     @ [GHC.Types.Char]
                                                     y
                                                     ($wgo3 ys (GHC.Prim.-# ds2 1#))
                                                1# -> GHC.Types.: @ [GHC.Types.Char] y n1 } }
                                     } in
                                     $wgo3 w n } } } } }) -}
bf9423097ac25afa3739331644fb8de9
  $wed' ::
    GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Prim.Char#
    -> GHC.Base.Maybe GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,1*U><S,U><L,1*U><L,U><L,U(U)><L,U><S,U>,
     Inline: [0] -}
5fc38e2dc9ca2c43e9442bfe2e3bbac0
  $wiCmd ::
    [GHC.Base.String]
    -> [GHC.Base.String] -> GHC.Prim.Int# -> [[GHC.Types.Char]]
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Base.String])
                   (w1 :: [GHC.Base.String])
                   (ww :: GHC.Prim.Int#) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww 1#
                 } in
                 let {
                   n :: [[GHC.Types.Char]]
                   = GHC.Base.++
                       @ [GHC.Types.Char]
                       w1
                       (case GHC.List.$wlenAcc @ [GHC.Types.Char] w 0# of ww2 { DEFAULT ->
                        let {
                          y1 :: GHC.Prim.Int# = GHC.Prim.+# (GHC.Prim.-# ww2 ww) 1#
                        } in
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<# 0# y1) of wild {
                          GHC.Types.False -> Ed.deleteLine1
                          GHC.Types.True
                          -> GHC.List.reverse1
                               @ GHC.Base.String
                               (GHC.List.$wunsafeTake
                                  @ [GHC.Types.Char]
                                  y1
                                  (GHC.List.reverse1
                                     @ GHC.Base.String
                                     w
                                     (GHC.Types.[] @ GHC.Base.String)))
                               (GHC.Types.[] @ GHC.Base.String) } })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0# y) of wild {
                   GHC.Types.False -> n
                   GHC.Types.True
                   -> letrec {
                        $wgo3 :: [[GHC.Types.Char]] -> GHC.Prim.Int# -> [[GHC.Types.Char]]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                        = \ (w2 :: [[GHC.Types.Char]]) (ww1 :: GHC.Prim.Int#) ->
                          case w2 of wild1 {
                            [] -> n
                            : y1 ys
                            -> case ww1 of ds2 {
                                 DEFAULT
                                 -> GHC.Types.:
                                      @ [GHC.Types.Char]
                                      y1
                                      ($wgo3 ys (GHC.Prim.-# ds2 1#))
                                 1# -> GHC.Types.: @ [GHC.Types.Char] y1 n } }
                      } in
                      $wgo3 w y }) -}
114611cbee912c2d2a31e0a2dfa8a1a8
  buffToFile ::
    GHC.Base.String -> [GHC.Base.String] -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Ed.buffToFile1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
07542c9c645c169e414fb757402484a5
  buffToFile1 ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (path :: GHC.Base.String)
                   (str :: [GHC.Base.String])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 System.IO.writeFile1 path (Data.OldList.unlines str) eta) -}
10e2cba6cdbeaea65c040624ec309b22
  deleteLine ::
    [GHC.Base.String]
    -> GHC.Types.Int -> GHC.Types.Int -> [GHC.Base.String]
  {- Arity: 3, Strictness: <S,U><S(S),1*U(U)><L,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Base.String])
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 -> Ed.$wdeleteLine w ww1 w2 }) -}
a13cc703fd8c838c18279469d9915a13
  deleteLine1 :: [GHC.Base.String]
  {- Unfolding: (GHC.List.reverse1
                   @ GHC.Base.String
                   (GHC.Types.[] @ [GHC.Types.Char])
                   (GHC.Types.[] @ GHC.Base.String)) -}
74a2d582105ed2d4554db0015d118c27
  deleteLine2 :: [GHC.Base.String]
  {- Strictness: x -}
83c37ad1fa6627c259e32a397ad60b2a
  ed :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Ed.ed1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
3c2c7d3682464bc398d210b4430930a6
  ed1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (System.Console.Haskeline.InputT.$wrunInputTBehavior
                         @ GHC.Types.IO
                         @ (GHC.Base.Maybe GHC.Base.String)
                         System.Console.Haskeline.MonadException.$fMonadExceptionIO
                         System.Console.Haskeline.Backend.defaultRunTerm1
                           `cast`
                         (Sym (GHC.Types.N:IO[0] <System.Console.Haskeline.Term.RunTerm>_R))
                         Ed.$sdefaultSettings
                         Ed.ed3)
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.Base.Maybe [GHC.Types.Char]>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 case Command.$wsetCmd
                        (case ipv1 of wild {
                           GHC.Base.Nothing -> GHC.Types.[] @ GHC.Types.Char
                           GHC.Base.Just v -> v }) of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 case ww3 of ww7 { GHC.Types.C# ww8 ->
                 Ed.$wed'
                   ww1
                   ww2
                   ww8
                   ww4
                   (GHC.Types.[] @ GHC.Base.String)
                   Ed.ed2
                   GHC.Types.True
                   ipv } } }) -}
a4c2028012b5c0e974b82cc07652c024
  ed2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
83bd65b796ffe53352f077aee32c9748
  ed3 ::
    System.Console.Haskeline.InputT.InputT
      GHC.Types.IO (GHC.Base.Maybe GHC.Base.String)
  {- Unfolding: (Ed.ed4 (GHC.Types.[] @ GHC.Types.Char)) -}
bd9412daaf7fc7bb0c019acc9eda4315
  ed4 ::
    GHC.Base.String
    -> System.Console.Haskeline.InputT.InputT
         GHC.Types.IO (GHC.Base.Maybe GHC.Base.String)
  {- Unfolding: (System.Console.Haskeline.promptedInput
                   @ GHC.Types.IO
                   @ (GHC.Base.Maybe GHC.Base.String)
                   Control.Monad.IO.Class.$fMonadIOIO
                   Ed.ed5
                   System.Console.Haskeline.Term.getLocaleLine
                     `cast`
                   (<System.Console.Haskeline.Term.FileOps>_R
                    ->_R Control.Monad.Trans.Maybe.N:MaybeT[0]
                             <GHC.Types.IO>_R <GHC.Base.String>_N)) -}
21341ddea66512e821d89adbf3c548a7
  ed5 ::
    System.Console.Haskeline.Term.TermOps
    -> GHC.Base.String
    -> System.Console.Haskeline.InputT.InputT
         GHC.Types.IO (GHC.Base.Maybe GHC.Base.String)
  {- Unfolding: (System.Console.Haskeline.getInputCmdLine
                   @ GHC.Types.IO
                   System.Console.Haskeline.MonadException.$fMonadExceptionIO
                   System.Console.Haskeline.LineState.emptyIM) -}
8dc269998f4fbdca068f56cc4bcbf614
  iCmd ::
    [GHC.Base.String]
    -> [GHC.Base.String] -> GHC.Types.Int -> [GHC.Base.String]
  {- Arity: 3, Strictness: <L,U><L,1*U><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Base.String])
                   (w1 :: [GHC.Base.String])
                   (w2 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 -> Ed.$wiCmd w w1 ww1 }) -}
80007dc6cf08e7258c7efa051df66393
  insert :: GHC.Types.IO [GHC.Base.String]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Ed.insert1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)) -}
3564dff802d1688d19c5d276fa52576c
  insert1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 1,
     Unfolding: (Ed.insert2
                   (GHC.Types.[] @ GHC.Base.String)
                   GHC.Types.False) -}
fa55a3898edc980a0f158e1930d860ba
  insert2 ::
    [GHC.Base.String]
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U> -}
"SPEC/Ed defaultSettings @ IO" [ALWAYS] forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                               GHC.Types.IO)
  System.Console.Haskeline.defaultSettings @ GHC.Types.IO $dMonadIO
  = Ed.$sdefaultSettings
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

